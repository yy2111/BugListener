{"ids": ["BYZ45JRP", "DnCTC6MB", "VORnFObm", "f2dyHK7m", "eKi1j8ci", "LBysNERT", "VOVHCDAS", "B22ePfVI", "2ZnCIuqT", "VCWu24Ni", "oNY1LyuG", "93u0HMLa", "5UR1qasD", "wp8gl5Xb", "ufJFoDcs", "A6tgLkSF", "1E0j6G9T", "KmniA0Qy", "5mEEZQDQ", "zRBBo5gK", "tn9jHVyp", "HTyNZtGu", "KoMRWyqr", "fWezvbOc", "uziHNYnK", "fRP86nic", "5JVsNBgl", "r7fOVNCt", "LbgZtHSk", "5HGsPmdh", "SJ5KVW4c", "fl67sRfd", "bvl4ib5O", "RClfnzTW", "QSMz6YWu", "YA6R4xCe", "l0omf8eM", "M9hgJtyp", "I1hpdiQ2", "A242ma2r", "D4H8TlmT", "zN391d43", "ydPOg5Wm", "j25xuYkb", "xX1bfSfp", "GU8ugD06", "3K6wPTQk", "N9GjiUHr", "sPIiiRX1", "GnKXrRPn", "IHuM9aAd", "i53PP3Dl", "qBAOoRfw", "fTqg5VGG", "5zrDiWRD", "eGPmQsRj", "AnSF1wGK", "pAMsM79P", "TM9UziU3", "xVW07AnH", "eYD1Tp9b", "mxuyw0WW", "4FnIWxR6", "A1sNVQo0", "DASnmmQn", "BiubNvAE", "ku66X3jY", "ShHIZu5c", "vzLYZ1qQ"], "dialog": [["Hey guys", "I was wondering, do imports of the same file in multiple files generate code duplication?", "d3lm: no imports don't genrate any code", "they just generate [<-CODE->] ", "or the equivalent depending on what you configure your module in tsconfig.json", "Ah ok but require produces code, no?", "no it's just a function that returns an object of whatever that file exports. each time you call require you get the same instance so no duplication", "dtabuenc: Oh interesting", "It is really recommended you start filling in your typings as you code... so if you come to a method like [<-CODE->] ", "So I can import that as often as I want and wont end up having the same code multipe times in my bundle", "you can then go into your typing and do something like: [<-CODE->] ", "Pretty cool", "Treeshaking is then just to eliminate code that is not used, right?", "d3lm: yeah tree shaking is to remove parts from within a module that were never imported", "Nice, Thanks"], ["Hi Guys, ", "how i can find definitions for typescript? maybe exist some service? like npm", "you actually use npm as long as you are using typsecript 2.0 +  [<-LINK->] so for  example if you need types for lodash", "you do [<-CODE->]"], ["Could somebody give me a helping hand in order to generate a npm module from a typescript library? Which steps would I need to follow?I've created a [<-LINK->] in order to give access to the code.", "dtabuenc: basically converts it to mongoose-way", "jeusdi: just add declarations: true to your ts config", "and add types: index.d.ts to your package.config", "dtabuenc: let me a time in order to dive a bit into what declarations: true and types: index.d.ts means", "declarations true makes tsc output a.d.ts file for every.js file it outputs and types in pacakge.json just points to it", "Mmm, as far I've been able to figure out\"*.d.ts\" files stand for providing typescript code to javascript libraries, doesn't it?", "By other side, index.d.ts is generated or is hand-made?", "jeusdi: when you compile ts it produces a.js but the js has no information about the types. If you have declarations: true, it will also produce a.d.ts file which has the type information", "the.d.ts file is only used if you import that module in another typescript project", "Got it!"], ["how do I enable generaotrs in tsconfig so when I use async / await in 2.1.1 so my code will take advantage of generators and thus create a lot less trasnpiled code (I am only targeting latest browsers)  ?", "found it", "sorry didn't find it", "I thought this will do it [<-CODE->] but still I dont see it taking advantage of generators", "when used [<-CODE->]  same results. also tried  [<-CODE->] ", "born2net: you have to target es6", "\"target\": \"es6\"", "the\"lib\"property is just for type declarations from those libs, it doesn't change what's outpute been able to figure out\"*.d.ts\" files stand for providing typescript code to javascript libraries, doesn't it?"], ["can I force typescript to trust a cast?", "What do you mean by \"trust\"?", "like if I implement a safer function that the type system cannot verify is correct, can I cast it. such that I'm saying \"trust me compiler, this is correct\"", "Yes", "yeah"], ["is there a way for my node terminal to give me errors from the typescript file and not the js file. I have source Maptrue in my ts config.json and theres a.map file that gets spit out in the same directory as the file that it maps", "if I paste your transpiled example as is, it also works. but I'm on node 6.6.0", "yeah it works for me now too", "it was a syntax error elsewhere in the file", "oh ok", "do you inline your sourcemaps?", "varunjayaraman: You need to use [<-LINK->] for typescript stack traces in node"], ["Hey! Is@types/angular-mocks removed? npmjs tells me that the latest version is \"0.0.0\" and I can't find it in DT on Github :D", "[<-LINK->] ", "con-ssc: I see that :) But the latest version is stated as \"0.0.0\"", "well if they use that in their package json so it is", "True, but I can't find it on DT on github. ", "That's why I think they maybe removed it. But could just be a mistake", "[<-LINK->] ", "Oh... It's in another branch :D", "[<-LINK->] ", "They pull it from types-2.0 branchs"], ["anyone know how to override Webpack Dev Server complaints about errors while compiling so a reload was prevented? there was a typescript error but it's non fatal. it's just like property x can't exist on type {} or whatever. because i modified an object after i declared it", "if you use awesome-typescript-loader with fork checker plugin you can split type checking from compilation", "for ts-loader I think there's an option to not do type checking", "what about other errors that are not typescript-related?", "actually ts-loader won't propogate errros to webpack so it will build fine even if you have a few type errors"], ["hi folks)", "Hi, i am looking for types for mongo-db-native package mongodb. how can i see if my typesdefs and the lib are in sync?", "jacobus-brogly: you can't thats the problem of community driven typedefs, if author of js lib/framework do not provide them, you can't be sure, even it they are packed together in npm", "jcimoch: okidoki", "so how do i mix libraries with type decl and one without type decl will it default to \"any\"", "depends on tsconfig but generaly yes, those without typeings will be any", "ok"], ["will this work? npm search@types/arcgis-js-api. i see only@typesversion 3.18 is on npm (i looked at valid install targets). i see the vendor also released version 4.1 some time ago on github but not updated npm", "can i just copy paste the t.ds file over the index file and be done with it? [<-LINK->] [<-LINK->] the 2 versions", "jacobus-brogly: no I would not copy over the file into the@types/folder. just don't use the@types for that one if there is no npm package available for it", "ok", "just use typings command or download it manually and add it to your files:[] array or your includes:[]"], ["hi all", "i have issue when lookup object and update value, my browser is crash when update data[<-CODE->]. how can i fix it?", "[<-CODE->] Just for readability", "con-ssc: thanks for your format. ", "everybody can help me? thanks", "code [<-CODE->]. how do i can lookup and update the value object1. my browser is crash when run this code", "You can't, if you use let it will be only available in the for loop", "you mean, we need use var@con-ssc", "[<-CODE->] ", "con-ssc: thanks"], ["hey all - I'm searching for some thoughts on a question I've been having regarding the consumption and publishing of third party libraries. I posted it on [<-LINK->] but I don't know if it'd get much attention as it would here. sorry for the re-post if you saw it over there", "dadleyy: tsc --noResolve are you trying that?", "con-ssc: use the \"-noResolve\" flag during the generation my library's \".d.ts\" file using \"-declaration\" or during the compilation of the consuming module that is importing it?", "I made you a ts version if you want", "[<-LINK->] hope this works"], ["How would I use a Proxy on a class if I\u2019m trying to intercept a static method?"], ["Can somebody explain to me what@means in this code [<-LINK->] ", "Gacnt: yeah the @ is usually decorators, but they wouldn't typically be used like@vts.blah(1)They would typically be decorating a class, method, parameter, or something like that.", "I guess it could  be used that way if there was an objectvts that had a function blah( param1:number) that returned another function that would actually be the decorator", "In the code you linked.....vts.componentis a decorator provided by the  vue framework", "a decorator is just a function that gets called when your class is declared. It gets passed in information about your class and can do whatever it wants.", "In this case, it would probably register a component with the vue framework or attache extra information to the class  or any number of things.", "you can read about them here [<-LINK->] "], ["is there any Di/ioc framework (for node.js) currenly widely accepted by typescript community? or is there some method/function in typescript so it\u2019s not needed? couldnt really find anything except the angular one", "[<-LINK->] haven't used it but I know that some people have used that", "would think it's similar to the angular 2 one", "thanks going to check it out", "thre are probably others, although I wouldn't classify any as having \"wide acceptance\" in the community", "angular 2 and aurelia have wide acceptance within their respective communities", "but  probably very few people using them outside as standalone DI", "scarlier: try there's one that's SUPER heavy handed called inversify", "i prefer this one called typedi that i prefer since its API is super simple", "varunjayaraman: ty inversify looks promesing", "varunjayaraman: what qualifies as SUPER heavy handed?", "varunjayaraman: any experience with the performance of it?", "dtabuenc: just felt like it was overly complicated to get it to work", "scarlier: I don't think performance is going to vary much between frameworks", "scarlier: i doubt it", "they all essentially register dependencies in some kind of lookup table", "and pull from there on instantiation", "so performance wise they will all be similar", "unless they are doing something really stupid", "all i needed was something that registers, gets, and can invoke functions with injected dependencies", "ah ok"], ["Will TypeScript interact with C++? Or even embed TypeScript/JavaScript API to C++?", "acterhd: there are some things out there, like nibind, and asm.js that can compile c++ to  js/ts or you can embed chrome v8 engine in c++ and run compiled typescript code."], ["dtabuenc: do you have an idea for  [<-LINK->] ", "yeah you trying to do a discriminated union?", "they type of type has to be a literal type", "right now it's just a string [<-CODE->] ", "they also probably shouldn't be classes. ", "use interface whenever possible for developing these apis. you can make classes to construct them if you want", "dtabuenc: still not working. ", "does this mean I have to create a type'A'?", "that should work for certain", "paste your full real code", "ok sorry this is indeed working", "but this was a minimal", "now what if I use a var [<-CODE->] ", "no change, it will still infer the type of A_TYPE is string and won't narrow it to the literal string 'A'", "but I can't doreadonly type: A_TYPE = A_TYPE", "yea because that wouldn't make any sense", "A_TYPE is a value not a type", "it's an alias/name for a value in your program", "when the code sees a string literal, it assumes unless given other context that it must be of type string", "I actually have a ticket open about a use-case where I think this is not-awesome  [<-ISSUE->] ", "I don't understand what this is doing [<-CODE->] because if I do [<-CODE->] this works, but the type function is not creating any type. T is string ?", "where are you gettiug this code from?", "that doesn't look like something you would write accidently", "[<-LINK->] absolutely not lol", "I'm trying to understand", "gotcha"], ["Anyone have experience contributing to DefinitelyTyped? It looks like I should clone the entire repo (!) and then runnpm test, which appears to run through the entire directory, says \u201cTesting\u2026\u201d and then exists silently. I do not expect any errors based on the change I made. Travis is failing on the PR and it seems like it has something to do with TypeScript versions \u2014 I doubt it was my change. Is this normal?"], ["Can anyone explain to me how I can get my jquery plugins working with typescript?  I'm trying to get [<-LINK->] working but there is no typings file available.  Any idea on a quick way I can make this happen?", "jasonbiondo: did you trynpm i -S @types/jquery?", "doh, misread that.", "you should be able to merge your declarations on top of the jquery declarations like: [<-LINK->] ", "mseddon: yeah, I\u2019m trying to sort it out but can\u2019t seem to figure it out.  Let me check this doc", "mseddon: I\u2019m using [<-CODE->] ", "whoa\u2026somehow now that works", "maybe I just needed to recompile", "huh. strange. ", "still, glad that worked for you :)"], ["here's another problem [<-CODE->]. but note that this is fine: [<-CODE->] ", "and again you actually need to use generics?", "hahaha", "dont you know i just put <T> on all my methods for fun by now? ;-) alright, let me explain what im doing", "im writing a clone() method", "that recursively clones a JS obj", "so i do something liketype MyObject = number | string | boolean | Buffer", "i even have{ [key: string]: MyObject }in there, but it's not really relevant", "but yeah, the idea is that i want the signature of my clone method to befunction clone<T extends GenericObject>(x: T): T", "in order to ensure that when i try to clone something, i've actually written a rule for how it should be cloned, so i dont accidentally try to clone something i can't.", "hopefully that's a simple and understandable use case, perhaps unlike yesterday ;-)", "but you don't have to make x be of type T", "hm?", "nevermind I see it now", "write up another issue, they seem to be really responsive.", "kk"], ["anyone know how to check for instances of vendor-specific apis? liek for example, how do I check if window.mozRequestAnimationFrame is defined? vs msRequestAnimationFrame etc", "stevekane: you mean so typescript won't complain? ", "I'd do if [<-CODE->]...", "Otherwise I'd just use a requestAnimationFrame polyfill."], ["Hi guys, I am having a hard time getting@types/cal-heatmapto work inside an Angular2/ionic2 project. The d.ts doesn't export anything, what do I have to add to benefit from the typings in this case? Here they are: [<-LINK->]", "For now, I use a declarations.d.ts in my project where I putdeclare module \"cal-heatmap\";but this is only to make the transpiler shut up.", "thaDude: They are just global declarations", "so you just install them and use them... no need to import anything.", "The declarations assume that there is a globalCalHeatMapvariable", "thaDude: You can do this to make it more friendly so you can import: [<-CODE->]", "put that in your declrations.d.ts", "and then do [<-CODE->] in your files.", "dtabuenc: Thanks for the tip. I'll try that."], ["Hello", "Can I use mapped types with generics somehow? For example: [<-CODE->] [<-CODE->]. So errors should be type hinted as errors.key1 and errors.key2, both resolving to strings and both being optional.  [<-LINK->] is the error I get. Same error if I leave errors as an empty object [<-CODE->]"], ["Could someone tell me:  I have created a utility class with  export class [<-CODE->].   My question is this, in C# if  you create a 'static' class with a public static function, you don't have to instantiate the class with new.  Can you do that with typescript ?  What I'm wondering is if I can just do Utility.formatDate()", "yes you can do that if the class has a static function you don't need to invoke it with new"], ["How can i create a dynamic instance of a class? Something like this: [<-CODE->]"], ["Hi, can I ask a syntax question here?", "try ;)", "[<-CODE->]  this works, but I was wondering if there was a construct like this: [<-CODE->] ", "I'm lazy you see ;)", "[<-CODE->] Works fine too, so I was wondering if there was a similar way for class variables", "const [a,b] = [foo\u2018, bar'] like this ?", "that works, the problem is that typeAPrivateList and typeBPrivateList are class variables, they are already declaerd in the constructor"], ["Hi Guys.", "Has anyone tried building Vue.plugin using typescript class? I am trying to get install method triggered but having no luck in doing that. If someone tried please let me know"], ["would it be possibe withtscto get  the AST output of a javascript file? And would it be possible to generate a simple d.ts from that AST ?"], ["[<-CODE->] What is the type of _cachedRights? My json is [<-CODE->] so I thought it would be _cachedRights: boolean[]But perhaps this is not the case?", "types is weird", "why do you do that?", "What'stypes/*??", "you should link to a specific d.ts file. it should be probably pointing to types/index.d.ts if you have one. basically types should point to the d.ts file of  what main is pointing to"], ["Hi, ", "I wanted to use TS'sHarnessAPIs to better verify the correctness of my typings forramda.js, but had trouble importing them since it doesn't export its namespace. Has anyone used these before?", "never heard of harness, what is that?", "TypeScript uses it to test compilation output for different use-cases to prevent regressions.", "domoritz: My guess forts.TypeFlags.Anonymous that now only ts.ObjectFlags.Anonymous is possible, but I'm only guessing", "ts.NodeFlags.Abstract seems to be only available asts.ModifierFlags.Abstract", "Since I have no Idea what your ts to json compiler does it is hard to help you out :)", "tuple is also now in object and reference also", "con-ssc: : json-schema does... schemas for json. his lib would allow reusing TS's compile-time sanity checks during run-time (i.e. on JSON data coming in over the wire),which is pretty cool. :)"], ["Anyone know how to extend map so as to provide your own strong typed version", "SamD: Map is a generic, so you can do: [<-CODE->] ", "That's not a type though", "I want to define my own type for usage throughout", "type myMap = Map<string, number>; ?", "So interface x implements Map<string, sometype> for example", "Oh u don't need to extend/implement ?", "what is your usecase?", "OK I'm a bit new to type script, I'll try it out thanks", "[<-CODE->] "], ["To follow up on my questions about the transition to TS 2.1 for [<-LINK->] , most test are passing now but I'm a bit stuck nonetheless.symbol.getDocumentationComment()used to return the complete comment but now I'm not seeing comments that start with@any more. E.g. [<-LINK->] ", "I believe changes to this function cause missing comments in [<-LINK->] ", "Looks like it's [<-ISSUE->] ", "domoritz: the json schema looks like the one microsoft is using for ms flow and such"], ["hi folks", "i have a question", "[<-CODE->] what type should dispatch have, I dont want to give \"any\" (react-redux) Dispatch is defined like so  [<-CODE->]. S from Dispatch<S> is not used,  note, this is the orignal \"type\" file of \"react-redux\"", "ok I see its related to this issue [<-ISSUE->], its a \"fix\" on Dispatch"], ["Hi, what do I need to do to get my typescript module which is hosted on my private github group to be used as a module dependancy for other projects from other users in my group?  I read that I should not put my .d.ts or my .js files in github, but they should be in my  module and the .ts files should not be in the module but should be in my github.  Publishing the module privately isn't an option sadly.", "avik-so: and option you can consider (I'm not sure if the best one) is using git submodules and your users have relative imports to your submodule location."], ["would you say this router is looking like a framework? or can I still get away with calling it vanilla?", "I don't think you should fixate on labels", "who cares?", "hehe", "I'm gonna demo it in the [<-LINK->]"], ["What\u2019s the easiest way to test/debug/step through a change to the compiler? There\u2019s no VSCode launch.json for instance. also, I can\u2019t seem to get sourcemaps to work. :/", "Hrm, had to build with jake (why are there two build tools?) and change it to no longer add -mapRoot\u2026 but it skips my breakpoints, even with stopOnEntry, only works if i use \u201cdebugger;\""], ["[<-CODE->]  [<-CODE->]  [<-CODE->] ", "chrillewoodz: According to the type string | Date your start Date could either be a string or aDate. Only the Date has the method toISOString()- the string does not. So TypeScript is smart enough to prevent you from calling a method that potentially does not exist during runtime."], ["Hey, easiest way to transform a string into a JSON? The string is already in a valid json format, only a bracket at the beginning and at the ending (was originally an array of json objects). Anyone has an idea?", "poulinjoel: JSON.parse(validjson)"], ["are there any npm packages for polyfilling EC2015 in typescript? E.g., the new Array methods?", "masonk: just use any js polyfill lib, then just lib in your tsconfig to inform the compiler your env has those methods", "nbransby: If I set a lib flag in tsconfig, that only works if I use a polyfill that gives me everything in ecmascript2015, doesn't it? It effectively asserts typings for all of EC2015", "masonk: I supports finer options than that, check the docs"], ["does a getter at typescript is recommended using Angular2 for  component?", "assaftenen: huh? Angular2 components are class's", "Toxicable: I know...", "what I meant to ask...is it good practice to use setter and getter at angular classes? Getter by definition is getting called at intervals, putting my proparties with it seems to be not so a good idea,", "If you're going to bind data to a getter then no", "It's often a bad idea to bind to a function", "A getter is just a function with synxtaxtical sugar", "which run every change detection is running so I guess it kind of bad prctice", "Yup"], ["I see it's on the roadmap but not for any specific version yet. So one other question, regarding npm publishing.If you include a .d.ts with a JS npm library, how would you handle fixes to types only? i.e., if the package version doesn't increment, I guess no one will get the updated types.But if the library has primarily JS users, they might not want the versioning noise of typescript definition fixes and the maintainers might not want to bump versions for just that.", "type changes seem like a good reason to have a new version", "Most users (and maybe maintainers) might not think that way though", "Maybe Definitely Typed is still a better option here"], ["[<-CODE->] It's consistent with what I've said. If webpack says, \"I can't find this file\", it's not lying to you. It didn't find the file and then pretend that it hasn't found it", "Well that may have to do  with search strategy, base-paths, mappings, etc.", "Yes, that's exactly what it has to do with", "I thought that part was clear \"can't find file\" means, \"Can't find file\"", "require('')will not use typescripts module resolution strategy", "it's just pased through to webpack while import will use typescript module resolution which will try several different paths and things", "if you don't get a compile time error with typescript that means typescript has found it", "but typescript search paths might not always equate to webpack settings, so a lot of times webpack settings need to be tweaked to match", "usually only the case if you are using path mapping or multiple source roots in typescript"], ["what does this mean?node_modules/vue/types/index\"' has no default export. if anyone can help me get this working, it is much appreciated: [<-LINK->]"], ["Hi, could you please help me with the following conflict: [<-CODE->] i have the following dependencies [<-CODE->] and tsconfig.json [<-CODE->] ", "MegaUkrainian: only thing that comes to mind is noLib and then manually define the libs in the tsconfig, have a look at [<-LINK->] --lib. but you could possibly just remove the es6-shim", "Thanks,  I'll try"], ["Currently, TypeScript/JavaScript debugging in VS2015 is a mess ( [<-LINK->] ). Can we hope that web client script debugging will be strongly improved with VS 2018?"], ["How can I pass a variable into the scope of a foreach, like so? [<-LINK->]"], ["Hi guys, I would like to know a way to import json from a json file into a Typescript file", "heyheyhey11: import it in what format? like import json straight into a variable?", "heyheyhey11: I don't think your question makes sense any more than say \"How do you import a .txt \" file into typescript. Or how do I import an \".html\" file into typescript.", "Json files must be read using whatever library, parser, or facility your runtime environment provides.", "it's not a native language feature.", "You can, however, describe the content of the json using interfaces, so that when you read it in using whatever method is appropriate, you  get intellisense in accessing that json's members."], ["how do you extend an rxjs Observable? [<-CODE->] from [<-LINK->]"], ["I am getting the following messages when I run tsc. [<-CODE->]. i have node_modules  as exclude in tsconfig.json", "DavisSylvester: you have two conflicting declarations for require. You likely have both@types/nodeand@types/requirejs. Is there a reason you need both?", "Is your project AMD?", "nope", "then try uninstalling@types/requirejs", "thanks a million, I removed @types/requirejs and all is HAPPY!", "Thanks@dtabuenc"], ["[<-CODE->] How to do it without Typescript warning? B cannot extend A.", "DanielKucal: so you want to start with an array ofAbut then mutate each element so it becomes aB?", "Yes,", "should i create new array of elements instead?", "I don't know, ", "I'd need more context, but you can get it to work as is."], ["does this look ok for the typedef.d.ts. typings.d.ts", "?do you have al ink to the js file you downloaded", "just do decalre module 'mymod'; no body no block", "if all you don't care things will be any", "yea I can get that need a sec [<-LINK->] "], ["How come the latest release is listed as 2.2 here: [<-LINK->] But the version in npm is 2.1.5? [<-LINK->] ", "aaronbeall: It's 2.2.1 for me, check again?", "yeah it's 2.2.1 not sure why you are seeing 2.1.5", "woah, it literally just changed before my eyes... and yep,nownpm install typescriptpicks up 2.2", "did it just change? or some kind of cache issue on my local?", "no it's been 2.2.1 since a couple days I think", "must be a cache issue", "yeah I thought so... weird"], ["Hi. Is there any simply way (eg some decorator) to convert an interface to a class which will wrap one such object? [<-CODE->] ", "larvanitis:  [<-CODE->] ", "dany-on-demand: Thanks but I would like to make it dynamic (at compile time) so that if the IPerson changes my  Friend would automatically get the extra properties", "dany-on-demand: The use case is: I have an api libary which defines its responses using interfaces and returns plain objects. I would like to easily extend some responses with custom functionality without having to manually track and apply changes from the source interface"], ["What Typescript version is suggested for compiling  RXJS ? In order to avoid these issues", "Deviad: You need core-js or a similar lib to add Promise support."], ["does it make sense to do boolean|void as return signature of a function?", "chrillewoodz: want to know what I think ?", ":)", "ghetolay: Yes please tell me ", "It's programatically right but designely weird"], ["Given this: [<-CODE->] Why does this cause an error: [<-CODE->] But this does not: [<-CODE->] ", "Matmo10: ahh.. the dangers of javascript type coercion", "it's actually keeping you from doing a  subtle error. TemplateType.Complexis equal to 0", "so when you do !templateType on a TemplateType.Complexit will actually return true", "which means on the right hand side of your ||templateType will never be able to be TemplateType.Complex", "You should just always avoid doing short hand!templateType when you actually mean to do a null check", "you should always be explicit on your null checks, or you'll run into a lot of subtle js bugs.", "Ah I see..that makes sense now", "Thank you :)"], ["Hey guys. ", "What's your favorite Ajax NPM utility that has built in TypeScript support? Or should I go with something like 'Request' and grab a .ts from DefinitelyTyped?", "vyrotek: as long as there is typings shouldn't be any difference between a ts and a js lib"], ["If I'm coding node with TS, should I avoid npm packages which dont have declaration files or a@typespackage?", "Keksike: If you need package, which dont have typings, so you can write your own", "dtabuenc: When I try to use a npm package which doesnt have a declaration file (@types), I get a errorCould not find a declaration file for module 'myLibrary'when I try to import it withimport * as myLib from 'myLibrary';", "How can I get around that error?", "you need to add a declaration at it's most basic you just have to do declare module 'myLibrary'; in that casemyLib will be type any", "where should I do it so typescript knows how to use it?", "usually in a file in your project like custom-typings.d.ts and then just make sure you include it in your compilation", "allright, thanks a lot :)"], ["Ok great. What's the advantage of usingPromise<void>overPromise<undefined>in this case? Where do they behave differently?", "grovesNL: I don't think it will be different in practice, but void really indicates that you expect no value", "vs undefined implies you would callresolve(undefined)", "even though in practice it won't make a difference, void is more semantically correct", "dtabuenc: right, it does seem to make more sense semantically. ", "Alright I'll try out Promise<void> thanks"], ["Hi all, quick question on testing with typescript/nodejs. What's the best practice for testing a file (without testing its dependencies/mocking them) if I'm not using an IoC container for dependency injection?", "In the past I've used proxyquire/mockery to \"hijack\" node's require but I'm having a little difficulty getting that setup with typescript+", "ezra-quemuel: with jest (ts-jest) you can mock es6 modules", "The trick/problem is that, when es6 modules imports are transpiled to commonjs require calls they are hoisted to the top of the file", "babel-jest hoist your mock calls above the  require calls, but ts-jest doesn't support it yet.So what you can do is to put your jest.mock calls on a module and import first thing to your test file", "ts-jest has other issues, like sometimes inaccurate coverage reports. but its working and super fast", "anyway, i would advocate to inject all the dependencies and import only type information", "thanks@Bnaya i think i may end up having to do that"], ["What are the valid characters for property names in TS? Cuneiform  is not (; Is there a list/rule-book I can check?", "that is not typescript specific I think, that is javascript in general", "yea, just realized... ", "I found es6 character validator"], ["is there a semver compare tool for .d.ts files ? compares two versions of .d.ts and suggests either major, minor or revision bump based on differences in types", "[<-LINK->] may be able to help with that@spion", "there is some support there for diffing .d.ts files in some capacity", "but I haven't used it", "hmm. It doesn\u2019t seem like its based on the language service API, and... it seems like I might want to read the paper to understand it, and its not linked :D", "I was thinking, how hard can it be? no changes to types = revision, \u201cadditions\" to covariant positions and removals from contravariant positions = minor, every other change in types = major", ":D", "but thats probably a bit naive"], ["Hi, I am beginner in TypeScript, and I would like  to ask next question: in JS arrow functions don't have own \"this\" and \"arguments\" and what about TS functions?", "BloodofDen: Arrow functions are transpiled to regular functions if your target is ES5 but I believe this is assigned to a variable to lock the execution context.Well in general, how something behave in TS should closely follow how it behave in JS."], ["if you should never use Number why does it even exist?", "never is a too strong word", "oh.", "wz2b: you should always use primitives and let javascript handle the boxing/unboxing thing like Number are there to serve as the prototype for all number operations", "and it's ok to use Number as a function to do runtime type conversion", "e.g.var myNumber = Number('5')", "Although discouraged... if you really needed to add something to the number prototype you could do so... e.g. [<-CODE->] ", "cool"], ["i wonder if anyone can help me with this query.  I have an array of line items.  i want to loop over them and convert them to a different type of line items (typical transform type stuff).  but within my loop, the ts compiler is not recognising that my line item as a property called 'quantity' for example", "FatherDougal: Code example?", "hinell: thanks for coming back to me, ", "it seems that, my property 'quantity' wasn't seen as public, i had presumed it was public by default.. weird."], ["Is it possible to create an object literal in TypeScript which extends a class? For example, consider the following: [<-CODE->]  [<-CODE->]  [<-CODE->] ", "sharwell: you can use class expressions: [<-CODE->] ", "Oh, interesting!", "JS also has__proto__for object literals, but it doesn't play well with TS [<-CODE->] ", "you would need to cast it, TS doesn't realise this object inherits fromotherObject"], ["@dtabuenc And to consider using inheritance when a base class needs a way to access the child (polymorphism)What?", "hinell: did you not understand my polymorphism point?", "dtabuenc: Yep. I didn't."], ["Hmm.. I'm seeing some weirdness with namespace declaration merging So I have this declaration file [<-CODE->]. And then I use it like this: [<-CODE->] and that's  fine. but I want to export Foo Interface alias. but when I try that I get an error [<-CODE->] ", "You are switching form a script file to a module file when you add top-level exports.", "Namespace merging does not work across module files, if I remember correctly.", "hmm.. so maybe I have to put a declare global around the namespace", "let me try", "bingo! Thanks@unional"], ["I find myself writing code like this a little bit: [<-CODE->]  [<-CODE->] ", "you would need to declare the scope of the variable outside the loop, no way around that"]], "user": [["d3lm", "d3lm", "dtabuenc", "dtabuenc", "dtabuenc", "d3lm", "dtabuenc", "d3lm", "dtabuenc", "d3lm", "dtabuenc", "d3lm", "d3lm", "dtabuenc", "d3lm"], ["Sweet-Bob", "Sweet-Bob", "dtabuenc", "dtabuenc"], ["jeusdi", "serhiisol", "dtabuenc", "dtabuenc", "jeusdi", "dtabuenc", "jeusdi", "jeusdi", "dtabuenc", "dtabuenc", "jeusdi"], ["born2net", "born2net", "born2net", "born2net", "born2net", "dtabuenc", "dtabuenc", "dtabuenc"], ["stevekane", "Izzmo", "stevekane", "Izzmo", "dtabuenc"], ["varunjayaraman", "dtabuenc", "varunjayaraman", "varunjayaraman", "dtabuenc", "varunjayaraman", "mika-fischer"], ["kristho91", "con-ssc", "kristho91", "con-ssc", "kristho91", "kristho91", "con-ssc", "kristho91", "con-ssc", "kristho91"], ["varunjayaraman", "dtabuenc", "dtabuenc", "varunjayaraman", "dtabuenc"], ["jacobus-brogly", "jacobus-brogly", "jcimoch", "jacobus-brogly", "jacobus-brogly", "jcimoch", "jacobus-brogly"], ["jacobus-brogly", "jacobus-brogly", "dtabuenc", "jacobus-brogly", "dtabuenc"], ["tuoitrexuquang", "tuoitrexuquang", "con-ssc", "tuoitrexuquang", "tuoitrexuquang", "tuoitrexuquang", "con-ssc", "tuoitrexuquang", "con-ssc", "tuoitrexuquang"], ["dadleyy", "con-ssc", "dadleyy", "con-ssc", "con-ssc"], ["etsuo"], ["Gacnt", "dtabuenc", "dtabuenc", "dtabuenc", "dtabuenc", "dtabuenc", "dtabuenc"], ["scarlier", "dtabuenc", "dtabuenc", "scarlier", "dtabuenc", "dtabuenc", "dtabuenc", "varunjayaraman", "varunjayaraman", "scarlier", "dtabuenc", "scarlier", "varunjayaraman", "dtabuenc", "varunjayaraman", "dtabuenc", "dtabuenc", "dtabuenc", "dtabuenc", "varunjayaraman", "scarlier"], ["acterhd", "dtabuenc"], ["ghetolay", "dtabuenc", "dtabuenc", "dtabuenc", "stevekane", "stevekane", "ghetolay", "ghetolay", "stevekane", "stevekane", "ghetolay", "ghetolay", "ghetolay", "stevekane", "ghetolay", "stevekane", "stevekane", "stevekane", "stevekane", "stevekane", "ghetolay", "stevekane", "stevekane", "ghetolay", "ghetolay", "stevekane"], ["subvertallchris"], ["jasonbiondo", "mseddon", "mseddon", "mseddon", "jasonbiondo", "jasonbiondo", "jasonbiondo", "jasonbiondo", "mseddon", "mseddon"], ["johnfn", "dtabuenc", "johnfn", "johnfn", "johnfn", "johnfn", "johnfn", "johnfn", "johnfn", "johnfn", "johnfn", "dtabuenc", "johnfn", "dtabuenc", "dtabuenc", "johnfn"], ["stevekane", "spacejack", "spacejack", "spacejack"], ["thaDude", "thaDude", "dtabuenc", "dtabuenc", "dtabuenc", "dtabuenc", "dtabuenc", "dtabuenc", "thaDude"], ["peeter-tomberg", "peeter-tomberg"], ["duckkiller53", "con-ssc"], ["iDiver77"], ["arnederuwe", "DrMabuse23", "arnederuwe", "arnederuwe", "arnederuwe", "DrMabuse23", "arnederuwe"], ["asolopovas", "asolopovas"], ["con-ssc"], ["TheeRFG", "dtabuenc", "dtabuenc", "dtabuenc", "dtabuenc"], ["tycho01", "tycho01", "con-ssc", "tycho01", "con-ssc", "con-ssc", "con-ssc", "con-ssc", "tycho01"], ["SamD", "Bnaya", "SamD", "SamD", "Bnaya", "SamD", "SamD", "Bnaya", "SamD", "Bnaya"], ["domoritz", "domoritz", "domoritz", "con-ssc"], ["jacobus-brogly", "jacobus-brogly", "jacobus-brogly", "jacobus-brogly"], ["avik-so", "ShadowManu"], ["quantuminformation", "dtabuenc", "dtabuenc", "dtabuenc", "quantuminformation"], ["joelday", "joelday"], ["chrillewoodz", "MartinJohns"], ["poulinjoel", "con-ssc"], ["masonk", "nbransby", "masonk", "nbransby"], ["assaftenen", "Toxicable", "assaftenen", "assaftenen", "Toxicable", "Toxicable", "Toxicable", "assaftenen", "Toxicable"], ["spacejack", "mmmveggies", "spacejack", "spacejack"], ["masonk", "dtabuenc", "masonk", "masonk", "dtabuenc", "dtabuenc", "dtabuenc", "dtabuenc", "dtabuenc"], ["fungos"], ["MikeShysh", "con-ssc", "MikeShysh"], ["SetTrend"], ["alonextou"], ["heyheyhey11", "dtabuenc", "dtabuenc", "dtabuenc", "dtabuenc", "dtabuenc"], ["lorezzed"], ["DavisSylvester", "dtabuenc", "dtabuenc", "DavisSylvester", "dtabuenc", "DavisSylvester", "DavisSylvester"], ["DanielKucal", "dtabuenc", "DanielKucal", "DanielKucal", "dtabuenc", "dtabuenc"], ["foxjazz", "dtabuenc", "dtabuenc", "dtabuenc", "foxjazz"], ["aaronbeall", "ShadowManu", "dtabuenc", "aaronbeall", "aaronbeall", "dtabuenc", "dtabuenc", "aaronbeall"], ["larvanitis", "dany-on-demand", "larvanitis", "larvanitis"], ["Deviad", "crystalbyte"], ["chrillewoodz", "ghetolay", "ghetolay", "chrillewoodz", "ghetolay"], ["Matmo10", "dtabuenc", "dtabuenc", "dtabuenc", "dtabuenc", "dtabuenc", "dtabuenc", "Matmo10", "Matmo10"], ["vyrotek", "vyrotek", "ghetolay"], ["Keksike", "AntonRatnick", "Keksike", "Keksike", "dtabuenc", "Keksike", "dtabuenc", "Keksike"], ["grovesNL", "dtabuenc", "dtabuenc", "dtabuenc", "grovesNL", "grovesNL"], ["ezra-quemuel", "ezra-quemuel", "Bnaya", "Bnaya", "Bnaya", "Bnaya", "Bnaya", "ezra-quemuel"], ["sasxa", "con-ssc", "sasxa", "sasxa"], ["spion", "DanielRosenwasser", "DanielRosenwasser", "DanielRosenwasser", "spion", "spion", "spion", "spion"], ["BloodofDen", "thibaultsavary"], ["wz2b", "wkrueger", "wz2b", "dtabuenc", "dtabuenc", "dtabuenc", "dtabuenc", "wz2b"], ["FatherDougal", "hinell", "FatherDougal", "FatherDougal"], ["sharwell", "felixfbecker", "sharwell", "felixfbecker", "felixfbecker"], ["hinell", "dtabuenc", "hinell"], ["dtabuenc", "unional", "unional", "dtabuenc", "dtabuenc", "dtabuenc"], ["alexjurkiewicz", "patsissons"]], "dialog_label": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "sen_label": [["GG", "OQ", "QA", "AE", "AE", "QE", "QA", "AE", "SA", "AE", "SA", "PF", "QE", "QA", "PF"], ["GG", "OQ", "SA", "SA"], ["OQ", "SA", "SA", "SA", "AE", "AE", "QE", "QE", "QA", "QA", "PF"], ["OQ", "AE", "AE", "AE", "AE", "SA", "AE", "AE"], ["OQ", "QE", "QA", "QA", "QA"], ["OQ", "QA", "PF", "AE", "AE", "QE", "SA"], ["OQ", "SA", "NF", "AE", "AE", "AE", "SA", "UF", "SA", "AE"], ["OQ", "SA", "AE", "QE", "QA"], ["GG", "OQ", "QA", "PF", "QE", "QA", "PF"], ["OQ", "OQ", "QA", "PF", "SA"], ["GG", "OQ", "QA", "GG", "GG", "QE", "QA", "AE", "SA", "GG"], ["OQ", "QE", "QA", "AE", "SA"], ["OQ"], ["OQ", "QA", "AE", "AE", "AE", "AE", "SA"], ["OQ", "QA", "AE", "UF", "AE", "AE", "AE", "SA", "AE", "UF", "QE", "QE", "QA", "QA", "QA", "AE", "AE", "AE", "AE", "AE", "PF"], ["OQ", "SA"], ["OQ", "QE", "AE", "AE", "AE", "SA", "NF", "QE", "QA", "RA", "PF", "AE", "QE", "QA", "AE", "AE", "AE", "AE", "AE", "AE", "QE", "QE", "AE", "QA", "AE", "AE"], ["OQ"], ["OQ", "QE", "AE", "SA", "NF", "AE", "PF", "AE", "AE", "AE"], ["OQ", "QE", "AE", "QE", "AE", "AE", "AE", "AE", "AE", "AE", "AE", "AE", "JK", "AE", "RA", "JK"], ["OQ", "QE", "AE", "AE"], ["OQ", "AE", "AE", "SA", "AE", "SA", "SA", "SA", "UF"], ["GG", "OQ"], ["OQ", "SA"], ["OQ"], ["GG", "AE", "OQ", "AE", "AE", "QE", "QA"], ["GG", "OQ"], ["OQ"], ["OQ", "QA", "QE", "QE", "SA"], ["GG", "OQ", "QE", "QA", "AE", "AE", "AE", "AE", "AE"], ["OQ", "SA", "NF", "AE", "QE", "AE", "QE", "QE", "UF", "SA"], ["OQ", "AE", "AE", "QA"], ["GG", "AE", "OQ", "AE"], ["OQ", "SA"], ["OQ", "QA", "AE", "JK", "AE"], ["OQ", "AE"], ["OQ", "QA"], ["OQ", "QA"], ["OQ", "SA", "QE", "QA"], ["OQ", "QA", "AE", "QE", "QA", "AE", "AE", "AE", "AE"], ["OQ", "QA", "AE", "AE"], ["OQ", "QA", "PF", "AE", "AE", "AE", "AE", "AE", "AE"], ["OQ"], ["OQ", "SA", "UF"], ["OQ"], ["OQ"], ["OQ", "QE", "AE", "AE", "AE", "SA"], ["OQ"], ["OQ", "QE", "QE", "QA", "SA", "PF", "GG"], ["OQ", "QE", "QA", "QE", "QA", "AE"], ["OQ", "QE", "SA", "AE", "UF"], ["OQ", "QE", "QA", "AE", "QE", "AE", "AE", "QA"], ["OQ", "SA", "NF", "AE"], ["OQ", "SA"], ["OQ", "QE", "JK", "QA", "AE"], ["OQ", "QA", "AE", "AE", "AE", "SA", "SA", "PF", "GG"], ["GG", "OQ", "QA"], ["OQ", "SA", "AE", "QE", "QA", "QE", "QA", "GG"], ["OQ", "QA", "AE", "AE", "AE", "GG"], ["OQ", "AE", "SA", "AE", "SA", "AE", "SA", "UF"], ["OQ", "QA", "PF", "AE"], ["OQ", "SA", "AE", "AE", "NF", "AE", "JK", "AE"], ["OQ", "QA"], ["OQ", "QA", "JK", "SA", "SA", "AE", "SA", "UF"], ["OQ", "QE", "QA", "AE"], ["OQ", "SA", "UF", "AE", "SA"], ["OQ", "QE", "QA"], ["OQ", "QA", "AE", "AE", "UF", "PF"], ["OQ", "SA"]], "graph_edge": [[[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [1, 8], [7, 8], [6, 9], [8, 10], [10, 11], [10, 12], [12, 13], [13, 14]], [[0, 1], [1, 2], [2, 3]], [[0, 1], [0, 2], [2, 3], [3, 4], [4, 5], [5, 6], [5, 7], [7, 8], [8, 9], [9, 10]], [[0, 1], [1, 2], [2, 3], [3, 4], [0, 5], [5, 6], [6, 7]], [[0, 1], [1, 2], [2, 3], [2, 4]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [0, 6]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]], [[0, 1], [1, 2], [1, 3], [3, 4]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]], [[0, 1], [1, 2], [2, 3], [1, 4], [2, 4]], [[0, 1], [1, 2], [2, 3], [2, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]], [[0, 1], [1, 2], [2, 3], [3, 4]], [0], [[0, 1], [1, 2], [2, 3], [2, 3], [3, 4], [4, 5], [5, 6]], [[0, 1], [1, 2], [2, 3], [2, 4], [4, 5], [5, 6], [0, 7], [7, 8], [8, 9], [7, 10], [9, 11], [10, 12], [11, 13], [13, 14], [13, 15], [15, 16], [16, 17], [17, 18], [12, 19], [19, 20]], [[0, 1]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25]], [0], [[0, 1], [1, 2], [0, 3], [3, 4], [3, 5], [0, 6], [6, 7], [6, 8], [6, 9], [8, 9]], [[0, 1], [1, 2], [1, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15]], [[0, 1], [0, 2], [2, 3]], [[0, 1], [1, 2], [2, 3], [3, 4], [0, 5], [5, 6], [6, 7], [7, 8]], [[0, 1]], [[0, 1]], [0], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]], [[0, 1]], [0], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]], [[0, 1], [1, 2], [2, 3], [3, 4], [3, 5], [4, 6], [6, 7], [7, 8], [8, 9]], [[0, 1], [1, 2], [0, 3]], [[0, 1], [1, 2], [2, 3]], [[0, 1]], [[0, 1], [1, 2], [2, 3], [3, 4]], [[0, 1]], [[0, 1]], [[0, 1]], [[0, 1], [1, 2], [2, 3]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]], [[0, 1], [1, 2], [2, 3]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]], [0], [[0, 1], [1, 2]], [0], [0], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]], [0], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]], [[0, 1], [1, 2], [2, 3], [3, 4]], [[0, 1], [0, 2], [1, 3], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]], [[0, 1], [1, 2], [2, 3]], [[0, 1]], [[0, 1], [1, 2], [2, 3], [3, 4]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]], [[0, 1], [1, 2]], [[0, 1], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]], [[0, 1], [1, 2], [2, 3]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]], [[0, 1]], [[0, 1], [1, 2], [0, 3], [3, 4], [4, 5], [5, 6], [6, 7]], [[0, 1], [1, 2], [2, 3]], [[0, 1], [1, 2], [2, 3], [3, 4]], [[0, 1], [1, 2], [2, 3]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]], [[0, 1]]]}
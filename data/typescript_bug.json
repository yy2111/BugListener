{"ids": ["ozaNlvig", "OzU9if2s", "wqYgi4c0", "2t6RoDDj", "TAzMaIK8", "Y9pZmHKV", "z1i7G8HG", "6qCRfPQo", "4Z3rT13q", "8qN4dtgf", "spDiTqK9", "jupQLZea", "mhSB5YyY"], "dialog": [["Does anyone have idea on why this code does not compile undernoImplicitAny?  [<-CODE->] ", "how would it know the type of s?", "dtabuenc: noteStrs<T>has an index signature, if I delete the first overload ofmutations, it compiles", "I think the type algebra might be too much for the inference engine and you just have to specify it", "This is a reduced example, in real world code the first argument is too complex to get manual annotation", "I guess there is some problem in overloading resolution and contextual inference, but cannot debugging further deeper.", "Probably this is a related issue to [<-ISSUE->] ", "Yeah it looks like that would be it. It's not clear that they are fixing that anytime soon though."], ["anyone got an example of a library that attaches an instance to window? I need to create typings for such a library and can't seem to get it to work", "Use interface augmentation [<-CODE->] you can also declare a global [<-CODE->] ", "hmmm, says X is not a module", "I have the import like: [<-CODE->] ", "I guess I don't get the reference to the window.lp Tag with that?", "also with that I get:File '/node_modules/liveperson-chat-api/src/index.d.ts' is not a module.", "I tried this: [<-CODE->] but then the lpTag is just an empty object and not the one that's attached to window", "not a fun experience :/ my TSC takes 7 seconds to compile so it takes me ages to try something that isn't going to work. trial and error", "expected this to work, but nope :/ [<-CODE->] ", "I've linked in the library that adds itself to window and am providing an index.d.ts, so that when I import it, then the script gets loaded.. but then how to get ahold of that window.lpTag reference -.-", "with the declare var lpTag; when I console.log lpTag as I import it, it just seems to be an empty object. Not sure wtf that is meant to be"], ["tsconfig paths - having an issue with using similar names. [<-CODE->] Issue 1: Can't make reference to @core within components core.Issue 2: Would have the word @core in both confuse the compiler?"], ["hello!", "does anyone know where the version number for types pulled using@types/librarycan be found online? i\u2019m trying to figure out whether i have the most recent version of published types.", "well if you just npm install it will update to the latest", "that\u2019s not what i\u2019m looking for, though", "subvertallchris: there should be a package.json inside the node_modules/@types/library directories that would have the version number in it, just like anything else from npm", "I use npm update checker to check for updates and tell me what version of everything I have.", "or are you referring to what version of the lib a particular npm package works with?", "coldacid: i see that but i am looking in the repo on github and package.json isn\u2019t there", "pretty much every package in the@typesscope is magically generated", "there\u2019s a mistake in the types for Three.js", "and i\u2019m trying to figure out whether i should update first or if i\u2019m already on latest", "you have to actually go into the node_modules directory in your project", "subvertallchris: just use npm view to see  all the versions available for a package", "ahh, that\u2019s a big help! thanks.", "[<-LINK->] ", "very cool", "I use this though, to check all my dependencies and report what updates are available", "that is really helpful", "But in any case, if you WANT to be on the latest version and you are not sure...just run npm install @types/library again that will always bring you up to the latest"], ["I am using the following TSConfig; [<-CODE->] In my .ts files, where ever I have a comment on the last line, the JS output is broken. E.g. [<-CODE->] Is this a known TS bug?", "[<-CODE->] does resolve it, but doesn't seem right that it should break on false.", "TS file in question [<-CODE->]", "Version 2.1.4"], ["I have an issue [<-ISSUE->] that haven't been triaged for 9 days now while later issues i've opened are already resolved.Is it possible it got missed?"], ["Hello, ", "I have some annoying bugs related to typescript's typing of webcrypto functions. I tried many times to correct them myself and I don't think I have the correct mental model of what needs to happen. When I filed a bug, there was a generic \"thank you, plz contribute\" response - I'm looking for help on the matter. bug in question: [<-ISSUE->]. another bug that I did not file since it imo falls under similar domain, is the fact that all webcrypto.subtle function return a PromiseLike instead of a Promise, which makes using catch impossible. I remember reading somewhere that modifying the lib.d.ts file is a big no-no and requires going through some hoops, which frankly sound over-complex and unintuitivly include several repos", "I would really like to get those bugs fixed and would love to work with someone so I may learn how to contribute future bug fixes / improvements to the type system"], ["One bug I dislike is when modifying a prop: Record<string, Foo> to prop: Map<string, Foo> which results in occurrences of Object. values(this.prop) not being a type error, although now that always returns an empty array because all the values in this.prop are now inside the Map and need to be accessed in a different way. The code silently becomes a bug. I wish we could express class properties as readable on the outside, writable on the inside [<-ISSUE->], instead of having to write [<-CODE->]. we would be able to write something shorter like  [<-CODE->]. Or, maybe just the following is simpler and better! [<-CODE->]. Ooooh, here we go, this one is terser: [<-CODE->]."], ["Hi everyone", "Why does [<-LINK->] compile with ES5 target and doesn't compile with ES2015/ES2016?", "Interesting, with ES5 TypeScript recognizes that it is an array and transpiles to a for (i = ... loop, but with ES6+ it uses an iterator instead and gets confused.", "Im not following at all. for...of was part of the ES2015 standard so it doesn't get transpiled. it wasn't part of the ES5 standard so it does get transpiled and for ES2016 same as ES2015, it was standardized so is therefore not transpiled.[<-LINK->] specifications at bottom. ES5 is the 5th edition of javascript, ES2015 is actually the 6th edition; not to be confused with eachother", "Unrelated ^ the issue is that switching to the newer target causes a compiler error. Interestingly, it works if you don't have the outer Battle wrapper...", "Weird yeah never seen that; i didn't thought changing the target changes the typechecking", "Under ES5 it thinks cell is a UI_Cell, under ES2015 or later it thinks it's a Cell. Seems to be getting confused by the intersecting of two array types. Probably a bug. I would report it"], ["hey guys ", "I think i've found a bug in the type checker , would you mind checking this out? maybe I'm missing something, or is it a bug?? [<-LINK->]"], ["Hello. ", "I think I've found a bug in the typescript type system but I don't know enough to be sure. Could I please have a hand determining if it is a bug (or if I am just confused) and perhaps finding a workaround? Specifically, the following code won't compile, even though to me it looks like it should: [<-CODE->]. What confuses me is that, although the first assignment is not allowed, the second two assignments, which look to be equivalent, are allowed. I tested this on [<-LINK->] as well as 3.0.1 so it should be recent.", "@NicholasThrom the problem is that you overtyped the get() method in Getter. it's always gonna be number | string or not, hmm. i didnt see that you implements. no idea, but it's a pretty weird pattern. i think you should do it with generics", "Generics is a good idea \u2014 I'll give that a try for my actual use case. In this case, though, I'm not sure if I should report it as a bug. Specifically it seems that return types for type intersection for two interfaces takes the type intersection of the return values, but the type intersection of an interface and a class takes the type union of the return values. I'll test out that theory.", "It's stranger than that: apparently type intersection is not commutative. Here is a more concise example:[<-CODE->]. Shouldn't x and y be the exact same?", "It looks like this is intended behaviour [<-LINK->], though I am not sure why. Sorry to have bothered you all, and thank you for the suggestions.", "wow that really looks like a bug. i had no idea A & B and B & A could be different"], ["Hmm unless I'm missing something, I think that the createSourceReplacingCompilerHost can lose the this context of the CompilerHost in some cases: [<-LINK->]", "[<-LINK->] Good to note! I\u2019ll bug them about it (if they start listening to me :-P) But yes"], ["Hi guys. ", "Im struggling with an interface definition. [<-CODE->] Should be the same or? Webstorm does not recognize the first one...", "You'll have to add TResult as a type-parameter to Test as well", "Oh. Sorry. Didn't notice the second line", "Yeah..also struggling with gitter ...sorry :D", "Which version of WebStorm? Works fine in IDEA 15", "Both works, but Webstorm (latest 2016.1) only recognizes x as typeof T for the doIt2...so [<-CODE->]", "I don't use WebStorm, but IDEA (which should use the same TS infrastructure) recognizes both", "I wonder if it is a webstorm bug or a undiscovered typescript bug :D", "I would imagine it's a WebStorm bug", "what's up? Catch me up to speed", "Looks like WebStorm isn't inferring a field-type correctly", "Weird. if it doesn't work in the playground, I'd file a bug on WebStorm"]], "user": [["HerringtonDarkholme", "dtabuenc", "HerringtonDarkholme", "dtabuenc", "HerringtonDarkholme", "HerringtonDarkholme", "HerringtonDarkholme", "dtabuenc"], ["intellix", "felixfbecker", "intellix", "intellix", "intellix", "intellix", "intellix", "intellix", "intellix", "intellix", "intellix"], ["itsphil"], ["subvertallchris", "subvertallchris", "dtabuenc", "subvertallchris", "coldacid", "dtabuenc", "dtabuenc", "subvertallchris", "coldacid", "subvertallchris", "subvertallchris", "coldacid", "dtabuenc", "subvertallchris", "dtabuenc", "subvertallchris", "dtabuenc", "subvertallchris", "dtabuenc"], ["itsphil", "itsphil", "itsphil", "itsphil"], ["Bnaya"], ["LiraNuna", "LiraNuna", "LiraNuna"], ["trusktr"], ["DoctorGester", "DoctorGester", "Gerrit0", "ShanonJackson", "Gerrit0", "ShanonJackson", "fatcerberus"], ["endel", "endel"], ["NicholasThrom", "NicholasThrom", "lazarljubenovic", "NicholasThrom", "NicholasThrom", "NicholasThrom", "lazarljubenovic"], ["DanielRosenwasser", "TheLarkInn"], ["otbe", "otbe", "josiahhaswell", "josiahhaswell", "otbe", "josiahhaswell", "otbe", "josiahhaswell", "otbe", "josiahhaswell", "DanielRosenwasser", "josiahhaswell", "DanielRosenwasser"]], "dialog_label": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "sen_label": [["OQ", "QE", "QA", "AE", "AE", "AE", "AE", "AE"], ["OQ", "SA", "NF", "AE", "AE", "AE", "AE", "AE", "AE", "AE", "AE"], ["OQ"], ["GG", "OQ", "SA", "NF", "AE", "AE", "QE", "AE", "AE", "AE", "AE", "SA", "SA", "PF", "SA", "PF", "AE", "PF", "SA"], ["OQ", "AE", "AE", "AE"], ["OQ"], ["GG", "OQ", "AE"], ["OQ"], ["GG", "OQ", "QA", "QA", "AE", "AE", "QA"], ["GG", "OQ"], ["GG", "OQ", "SA", "UF", "QE", "AE", "QA"], ["OQ", "QA"], ["GG", "OQ", "SA", "AE", "AE", "QE", "QA", "AE", "QE", "QA", "QE", "QA", "AE"]], "graph_edge": [[[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]], [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]], [0], [[0, 1], [1, 2], [2, 3], [1, 4], [3, 5], [5, 6], [4, 7], [7, 8], [8, 9], [9, 10], [10, 11], [10, 12], [12, 13], [12, 14], [14, 15], [14, 16], [16, 17], [16, 18]], [[0, 1], [1, 2], [2, 3]], [0], [[0, 1], [1, 2]], [0], [[0, 1], [1, 2], [1, 3], [3, 4], [4, 5], [1, 6]], [[0, 1]], [[0, 1], [1.2], [2, 3], [2, 4], [4, 5], [5, 6]], [[0, 1]], [[0, 1], [1, 2], [1, 3], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [1, 10], [10, 11], [11, 12]]]}